---
import type { CollectionEntry } from "astro:content";
import type { SubRouteType } from "site/types/routes";
import { RefreshCw } from "lucide-astro";

// site/components/FilterDropdown.astro
interface Props {
  items: Array<CollectionEntry<SubRouteType>>;
}

const { items } = Astro.props;

// 경로와 태그 추출
const paths = [...new Set(items.map((item) => item.id.split("/")[0]))];

const tagKeys = [
  ...new Set(items.flatMap((item) => Object.keys(item.data.tags || {}))),
];

// 각 태그 키별로 유니크한 값 추출
const tagValues = {};
tagKeys.forEach((key) => {
  tagValues[key] = [
    ...new Set(
      items.flatMap((item) =>
        item.data.tags && item.data.tags[key] ? [item.data.tags[key]] : [],
      ),
    ),
  ];
});
---

<div class="container mb-6">
  <search id="filter-count" class="text-secondary mb-2 text-sm">
    Result : {items.length} Posts
  </search>
  <div class="flex flex-col flex-wrap items-start gap-4 sm:flex-row">
    <!-- 각 태그 타입별 필터 -->
    {
      tagKeys.length > 0 && (
        <div class="tag-filters flex flex-col gap-1">
          <label class="mb-1 block text-sm font-medium">Filters</label>
          <div class="flex flex-wrap gap-x-4 sm:flex-row">
            {tagKeys.map((tagKey) => (
              <details class="tag-filter-group group">
                <summary
                  class={`${tagKey} mb-1 block w-fit cursor-pointer rounded px-1 py-0.5 text-sm font-medium`}
                >
                  {tagKey}
                </summary>
                <div class="tag-options border-border bg-background absolute z-10 flex max-w-64 flex-col flex-wrap gap-2 overflow-y-auto rounded border p-2 opacity-0 transition-opacity duration-150 group-open:opacity-100">
                  {tagValues[tagKey].map((value) => (
                    <label class="tag-option flex cursor-pointer items-center gap-1">
                      <input
                        type="checkbox"
                        name={`tag-${tagKey}`}
                        id={`cb-${value}`}
                        value={value}
                        class="tag-checkbox bg-theme"
                        data-tag-key={tagKey}
                      />
                      <span class="text-sm capitalize">{value}</span>
                    </label>
                  ))}
                </div>
              </details>
            ))}
          </div>
        </div>
      )
    }

    <button
      id="reset-filter"
      class="text-theme group mt-6 hidden cursor-pointer text-xs hover:underline"
    >
      <div class="flex items-center gap-1">
        <RefreshCw class="group-hover:animate-spin" size={16} />
        <span>Reset</span>
      </div>
    </button>
  </div>
</div>

<script>
  // DOM 요소 참조
  const tagCheckboxes = document.querySelectorAll(
    ".tag-checkbox",
  ) as NodeListOf<HTMLInputElement>;
  const resetButton = document.getElementById(
    "reset-filter",
  ) as HTMLButtonElement | null;
  const filterCount = document.getElementById(
    "filter-count",
  ) as HTMLDivElement | null;
  const listItems = document.querySelectorAll("ol > li");
  const tagFilterGroups = document.querySelectorAll("details.tag-filter-group");

  // 현재 필터 상태
  let currentFilters = {
    tags: {} as Record<string, string[]>,
  };

  // URL 쿼리 파라미터에서 필터 상태를 로드하는 함수
  function getFiltersFromURL(fromUrl = ""): {
    tags: Record<string, string[]>;
  } {
    const params = new URLSearchParams(fromUrl || window.location.search);
    const filters = {
      tags: {} as Record<string, string[]>,
    };

    tagCheckboxes.forEach((checkbox) => {
      const key = checkbox.getAttribute("data-tag-key");
      const value = checkbox.value;
      if (!key) return;

      if (params.has(key) && params.getAll(key).includes(value)) {
        if (!filters.tags[key]) {
          filters.tags[key] = [];
        }
        if (!filters.tags[key].includes(value)) {
          filters.tags[key].push(value);
        }
      }
    });

    return filters;
  }

  // 현재 UI 상태 (checkbox) 에서 필터 상태를 가져오는 함수
  function getFiltersFromUI(): {
    tags: Record<string, string[]>;
  } {
    const filters = {
      tags: {} as Record<string, string[]>,
    };
    tagCheckboxes.forEach((checkbox) => {
      if (!checkbox.checked) return;
      const key = checkbox.getAttribute("data-tag-key");
      const value = checkbox.value;
      if (!key) return;
      if (!filters.tags[key]) filters.tags[key] = [];
      filters.tags[key].push(value);
    });
    return filters;
  }

  // UI 업데이트 함수
  function updateUI(filters: { tags: Record<string, string[]> }): void {
    tagCheckboxes.forEach((checkbox) => {
      const key = checkbox.getAttribute("data-tag-key");
      const value = checkbox.value;
      checkbox.checked = !!(key && filters.tags[key]?.includes(value));
    });
  }

  // 필터 상태에 따라 목록 아이템 표시/숨김 처리 및 개수 반환 함수
  function filterListItems(filters: {
    tags: Record<string, string[]>;
  }): number {
    let visibleCount = 0;
    listItems.forEach((item) => {
      let isVisible = true; // 기본값을 true로 설정

      if (isVisible && Object.keys(filters.tags).length > 0) {
        for (const key in filters.tags) {
          if (filters.tags[key].length === 0) continue;

          const itemTagValue = item.getAttribute(`data-tag-${key}`) || "";
          if (!itemTagValue || !filters.tags[key].includes(itemTagValue)) {
            isVisible = false;
            break;
          }
        }
      }

      // 아이템 표시/숨김
      item.classList.toggle("hidden", !isVisible);
      if (isVisible) {
        visibleCount++;
      }
    });
    return visibleCount;
  }

  // 필터링 결과 개수와 리셋 버튼 표시 상태 업데이트 함수
  function updateDisplay(
    count: number,
    filters: { tags: Record<string, string[]> },
  ): void {
    if (filterCount) {
      filterCount.textContent = `Result : ${count} Posts`;
    }
    if (resetButton) {
      const isFilterActive = Object.values(filters.tags).some(
        (arr) => arr.length > 0,
      );
      resetButton.classList.toggle("hidden", !isFilterActive);
    }
  }

  // 필터 상태에 따라 URL 쿼리 파라미터를 업데이트하는 함수
  function updateURL(
    filters: {
      tags: Record<string, string[]>;
    },
    mode = "push",
  ): void {
    const params = new URLSearchParams();
    for (const key in filters.tags) {
      filters.tags[key].forEach((value) => {
        params.append(key, value);
      });
    }
    // URL 업데이트 (페이지 리로드 없이)
    const queryString = params.toString();
    const newUrl = queryString
      ? `${window.location.pathname}?${queryString}`
      : window.location.pathname;
    if (mode === "push") {
      history.pushState(null, "", newUrl);
    } else {
      history.replaceState(null, "", newUrl);
    }
  }

  // 필터 변경 시 실행될 메인 핸들러 함수
  function handleFilterChange(navigateMode = "push"): void {
    currentFilters = getFiltersFromUI();
    const visibleCount = filterListItems(currentFilters);
    updateDisplay(visibleCount, currentFilters);
    updateURL(currentFilters, navigateMode);
  }

  // --- 이벤트 리스너 설정 ---

  // 페이지 로드 시: URL에서 필터 로드, UI 업데이트, 필터링 적용
  function initializeFilters(e) {
    const pageUrl = e.target?.location?.search || "";
    if (!resetButton || !filterCount) {
      console.error("[FILTER-INIT]:Essential filter UI not found");
      return;
    }
    currentFilters = getFiltersFromURL(pageUrl);
    updateUI(currentFilters);
    const visibleCount = filterListItems(currentFilters);
    updateDisplay(visibleCount, currentFilters);
  }

  // 태그 체크박스 변경 시
  tagCheckboxes.forEach((cb) => {
    cb.addEventListener("change", () => handleFilterChange("replace")); // replaceState 사용하도록 변경 가능
  });

  // 리셋 버튼 클릭 시
  resetButton?.addEventListener("click", () => {
    currentFilters = { tags: {} }; // 상태 초기화 (tags만)
    updateUI(currentFilters); // UI 초기화
    updateURL(currentFilters, "replace"); // URL 파라미터 제거
    const visibleCount = filterListItems(currentFilters); // 리스트 다시 필터링
    updateDisplay(visibleCount, currentFilters); // 표시 업데이트
  });

  // details(태그 그룹) 외부 클릭 시 닫기
  document.addEventListener("click", (e) => {
    tagFilterGroups.forEach((detail) => {
      if (detail.hasAttribute("open") && !detail.contains(e.target as Node)) {
        detail.removeAttribute("open");
      }
    });
  });

  // Astro 페이지 전환 완료 후 필터 초기화 함수 실행
  document.addEventListener("astro:page-load", initializeFilters); // 또는 astro:after-swap
</script>
